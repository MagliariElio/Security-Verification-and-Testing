 (*
   Sample handshake protocol (typed version)
 *)

type pkey.	(* public key *)
type skey.	(* private key *)
type keymat.	(* key material *)
type result.	(* result of check signature *)

free c:channel.			(* the public channel *)
free s1:bitstring [private]. 	(* the secret *)
free s2:bitstring [private]. 	(* the secret *)

(* Public-key Encryption *)
fun penc(bitstring, pkey): bitstring.
fun pk(keymat): pkey.
fun sk(keymat): skey.
reduc forall x:bitstring, y:keymat; pdec(penc(x,pk(y)),sk(y)) = x.

(* Signatures *)
fun ok():result.
fun sign(bitstring, skey): bitstring.
reduc forall m:bitstring, y:keymat; getmess(sign(m,sk(y))) = m.
reduc forall m:bitstring, y:keymat; checksign(sign(m,sk(y)), pk(y)) = ok().

(* Shared-key cryptography *)
fun senc(bitstring, bitstring): bitstring.
reduc forall x: bitstring, y: bitstring; sdec(senc(x,y),y) = x.


(* Test whether s is secret *)
query attacker(s1).
query attacker(s2).

(* Test reachability *)
event endA().
event endB().
query event(endA()).
query event(endB()).

(* Test authentication *)
event bA(pkey,pkey,bitstring,bitstring).
event eB(pkey,pkey,bitstring,bitstring).
query x:pkey,y:pkey,z:bitstring,nonce:bitstring; inj-event(eB(x,y,z,nonce)) ==> inj-event(bA(x,y,z,nonce)).
event srecv(pkey,pkey,bitstring).
event ssend(pkey,pkey,bitstring).
query x:pkey,y:pkey,z:bitstring; inj-event(srecv(x,y,z)) ==> inj-event(ssend(x,y,z)).

(* The process *)

let pA(kpA: keymat, pkB: pkey) =
        (* getting the nonce from B *)
        in(c, nonce:bitstring);
        new k:bitstring;
        event bA(pk(kpA),pkB,k, nonce);
        out(c, penc(sign((k, nonce), sk(kpA)), pkB));
        in(c,x:bitstring);
        let xs=sdec(x, k) in
        event srecv(pk(kpA), pkB, xs);        (* segreto ricevuto da pB *)
        event endA(); 0.

let pB(kpB: keymat, pkA: pkey, s:bitstring) =
        (* sending the nonce generated *)
        new nonce:bitstring;
        out(c, nonce);
        (* getting the secret key *)
        in(c, y:bitstring);
        let y1=pdec(y, sk(kpB)) in
        if checksign(y1, pkA)=ok() then
        let (=nonce, xk:bitstring)=getmess(y1) in (* =nonce controlla il valore corrispondente che viene restituito dal getmess(y1) se sono uguali altrimenti non continua con l'if *)
        event eB(pkA,pk(kpB),xk, nonce);
        event ssend(pkA, pk(kpB), s);   (* invio dell'evento che si sta per inviare il segreto *)
        out(c, senc(s, xk));
        event endB(); 0.

process
         new kpA:keymat; new kpB:keymat;
         (!out(c, pk(kpA)); 0 | !out(c, pk(kpB)); 0 |
          !pA(kpA, pk(kpB))  | !pB(kpB, pk(kpA), s1) | !pB(kpB, pk(kpA), s2)
         )

(* EXPECTPV
Query not attacker(s1[]) is true. l'attaccante non ha successo nell'attaccare s1
Query not attacker(s2[]) is true. l'attaccante non ha successo nell'attaccare s2
Query not event(endA) is false.
Query not event(endB) is false.
Query inj-event(eB(x_1,y_1,z)) ==> inj-event(bA(x_1,y_1,z)) is true.
Query inj-event(srecv(x,y,z)) ==> inj-event(ssend(x,y,z)) is true.
END *)

(*
  !out(c, pk(kpA)); 0 | !out(c, pk(kpB)); 0 | !pA(kpA, pk(kpB))  | !pB(kpB, pk(kpA))
  !out(c, pk(kpA)); => vuol dire che viene scritto sul canale c la chiave pubblica di A in modo tale da informare anche l'attaccante della chiave pubblica di A
  0 => termina con valore 0
  | => indica il parallelismo, quindi il processo puÃ² eseguire diversi compiti parallelamente
  ! => indica che possiamo avere diverse sessioni
*)
